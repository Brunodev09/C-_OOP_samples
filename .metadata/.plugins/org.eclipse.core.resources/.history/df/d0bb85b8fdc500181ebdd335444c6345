

#ifndef TEMP_H_
#define TEMP_H_

#include <iostream>

using namespace std;

template<typename P>//This creates the template of a class. Definitions of func must be on the same file

class Point {
protected:
	P x;
public:
	Point(P =0);
	~Point();
	P getX();
	void setX(P);
};
template<typename P>
Point<P>::Point(P x) {
	this->x = x;
}
template<typename P>
P Point<P>::getX() {
	return x;
}
template<typename P>
void Point<P>::setX(P x) {
	this->x = x;
	cout << "I'm from Point!" << endl;
}
template<typename P>
Point<P>::~Point() {

}

template<typename P>
class Point2D : public Point<P> {
protected:
	P y;
public:
	Point2D(P =0, P =0);
	~Point2D();
	int getY();
	void setY(P);
	void set(P, P);
	void setX(P);
	Point2D operator+(Point2D);

};


Point2D::Point2D(int x, int y) : Point(x) {
	this->y = y;
}

int Point2D::getY() {
	return y;
}

void Point2D::setY(int y) {
	this->y = y;
}

void Point2D::set(int x, int y) {
	setX(x);
	setY(y);
}

void Point2D::setX(int x) {
	this->x = x;
	cout << "I'm from Point2D!" << endl;
}

Point2D Point2D::operator +(Point2D obj) {
	Point2D aux;

	aux.setX(getX() + obj.getX());
	aux.setY(getY() + obj.getY());

	return aux;
}

Point2D::~Point2D() {

}





#endif /* TEMP_H_ */
